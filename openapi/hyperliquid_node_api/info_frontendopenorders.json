{
  "openapi": "3.0.0",
  "info": {
    "title": "Hyperliquid Node API",
    "version": "1.0.0",
    "description": "This is an API for interacting with Chainstack Hyperliquid node."
  },
  "servers": [
    {
      "url": "https://hyperliquid-mainnet.core.chainstack.com"
    }
  ],
  "paths": {
    "/4f8d8f4040bdacd1577bff8058438274/info": {
      "post": {
        "tags": [
          "hyperliquid operations"
        ],
        "summary": "info (frontendOpenOrders)",
        "operationId": "infoFrontendOpenOrders",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "frontendOpenOrders",
                    "enum": ["frontendOpenOrders"],
                    "description": "Request type to retrieve user's open orders with frontend-specific formatting"
                  },
                  "user": {
                    "type": "string",
                    "default": "0x31ca8395cf837de08b24da3f660e77761dfb974b",
                    "description": "Address in 42-character hexadecimal format"
                  },
                  "dex": {
                    "type": "string",
                    "default": "",
                    "description": "Perp dex name. Defaults to the empty string which represents the first perp dex. Spot open orders are only included with the first perp dex."
                  }
                },
                "required": [
                  "type",
                  "user"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of user's open orders with frontend-specific formatting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of open orders formatted for frontend display",
                  "items": {
                    "type": "object",
                    "properties": {
                      "coin": {
                        "type": "string",
                        "description": "Trading pair or asset symbol (e.g., 'BTC', 'ETH')"
                      },
                      "limitPx": {
                        "type": "string",
                        "description": "Limit price of the order"
                      },
                      "oid": {
                        "type": "integer",
                        "description": "Order ID - unique identifier for the order"
                      },
                      "side": {
                        "type": "string",
                        "description": "Order side: 'A' for ask (sell), 'B' for bid (buy)"
                      },
                      "sz": {
                        "type": "string",
                        "description": "Order size"
                      },
                      "timestamp": {
                        "type": "integer",
                        "description": "Order creation timestamp in milliseconds"
                      },
                      "triggerCondition": {
                        "type": "string",
                        "description": "Trigger condition for conditional orders"
                      },
                      "triggerPx": {
                        "type": "string", 
                        "description": "Trigger price for conditional orders"
                      },
                      "orderType": {
                        "type": "string",
                        "description": "Type of order (e.g., 'Limit', 'Market', 'Stop')"
                      },
                      "reduceOnly": {
                        "type": "boolean",
                        "description": "Whether this is a reduce-only order"
                      }
                    },
                    "required": [
                      "coin",
                      "limitPx",
                      "oid",
                      "side", 
                      "sz",
                      "timestamp"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}
