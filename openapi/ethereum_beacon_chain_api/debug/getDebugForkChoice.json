{
  "openapi": "3.0.0",
  "info": {
    "title": "Ethereum Beacon Debug Fork Choice API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://ethereum-mainnet.core.chainstack.com"
    }
  ],
  "paths": {
    "/beacon/2f6d649e68c2f861fecd5b8a9e35139e/eth/v1/debug/fork_choice": {
      "get": {
        "summary": "Get fork choice array",
        "operationId": "getDebugForkChoice",
        "description": "Retrieves all current fork choice context including justified and finalized checkpoints, and the complete fork choice tree with all nodes and their weights.",
        "tags": [
          "Debug"
        ],
        "responses": {
          "200": {
            "description": "Success - Fork choice data retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetForkChoiceResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetForkChoiceResponse": {
        "type": "object",
        "description": "Debugging context of fork choice",
        "required": [
          "justified_checkpoint",
          "finalized_checkpoint",
          "fork_choice_nodes"
        ],
        "properties": {
          "justified_checkpoint": {
            "$ref": "#/components/schemas/Checkpoint"
          },
          "finalized_checkpoint": {
            "$ref": "#/components/schemas/Checkpoint"
          },
          "fork_choice_nodes": {
            "type": "array",
            "description": "Fork choice nodes representing the complete fork choice tree",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ForkChoiceNode"
            }
          },
          "extra_data": {
            "type": "object",
            "description": "Optional extra data that clients may provide, which could differ from client to client"
          }
        }
      },
      "Checkpoint": {
        "type": "object",
        "description": "The Checkpoint object from the CL spec",
        "required": [
          "epoch",
          "root"
        ],
        "properties": {
          "epoch": {
            "type": "string",
            "example": "1",
            "description": "The epoch number of this checkpoint"
          },
          "root": {
            "type": "string",
            "format": "hex",
            "example": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "The block root of this checkpoint"
          }
        }
      },
      "ForkChoiceNode": {
        "type": "object",
        "description": "Fork choice node attributes",
        "required": [
          "slot",
          "block_root",
          "parent_root",
          "justified_epoch",
          "finalized_epoch",
          "weight",
          "validity",
          "execution_block_hash"
        ],
        "properties": {
          "slot": {
            "type": "string",
            "example": "1",
            "description": "The slot to which this block corresponds"
          },
          "block_root": {
            "type": "string",
            "format": "hex",
            "example": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "The signing merkle root of the BeaconBlock"
          },
          "parent_root": {
            "type": "string",
            "format": "hex",
            "example": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "The signing merkle root of the parent BeaconBlock"
          },
          "justified_epoch": {
            "type": "string",
            "example": "1",
            "description": "The justified epoch from this block's perspective"
          },
          "finalized_epoch": {
            "type": "string",
            "example": "1",
            "description": "The finalized epoch from this block's perspective"
          },
          "weight": {
            "type": "string",
            "example": "1",
            "description": "The weight/score of this block in the fork choice algorithm"
          },
          "validity": {
            "type": "string",
            "enum": [
              "valid",
              "invalid",
              "optimistic"
            ],
            "description": "The validity status of this block"
          },
          "execution_block_hash": {
            "type": "string",
            "format": "hex",
            "example": "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "description": "The block_hash from the execution_payload of the BeaconBlock"
          },
          "extra_data": {
            "type": "object",
            "description": "Optional extra data that clients may provide, which could differ from client to client"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          },
          "stacktraces": {
            "type": "array",
            "description": "Optional stacktraces, sent when node is in debug mode",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}